#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
只需要关心3个要素
	事物名称（类名）：人类（Person）
	特征：身高（height）、年龄（age）—————》名词———》变量
	行为：跑（run）、打架（fight）———————》动词————》函数

	初期学习，通过提炼动名词进行类的提取
'''

'''
【面试题】简述类属性【类的字段】和实例属性【对象属性，对象的字段】的区别
    1.定义位置不同：类属性直接定义在类中，只要是动态绑定的属性都是实例属性【在init中或在类的外面直接动态绑定定义】
    2.访问方式不同：类属性可以通过类名或对象访问，而实例属性只能通过对象访问
    3.访问优先级不同：当类属性和实例属性重名时，通过对象访问，优先访问的是实例属性
    4.在内存中出现的时机不同：类属性优先于实例属性出现在内存中，类属性随着类的加载而出现，实例属性是对象创建完毕之后才会出现
    5.使用场景不同：类属性用于表示多个对象共享的数据，实例属性表示每个对象特有的数据
'''

class Person():
    # 1.定义的位置不同
    # 类属性：直接定义在类中
    place = '地球'
    num = 66
    # 实例属性，形式一：只要通过  对象.属性 = 值 语法，定义的属性
    def __init__(self,name,age):
        self.name = name
        self.age = age
p1 = Person('小米', 10)
# 实例属性 体现形式二
p1.hobby = '篮球'
p1.num = 100

# 2. 访问的方式不同
# 类属性可以通过类名或者对象访问
print(Person.place)
print(p1.place)

# 3.实例属性只能通过对象访问
print(p1.name, p1.age, p1.hobby)

# 4.访问优先级不同：当类属性和实例属性重名时，通过对象访问，优先访问的是实例属性
print(p1.num)   # 100

del p1.num  # 删除的是实例属性
print(p1.num)   # 同名的实例属性被删除之后，访问的是类属性  66


# 5. 使用场景不同：类属性用于表示多个对象共享的数据，实例属性表示每个对象特有的数据
p2 = Person('张麻子', 22)
p3 = Person('黎明', 23)
print(p1.place,p2.place,p3.place)
print(p1.name, p2.name, p3.name)

p1.name ="Jack"
print(p1.name, p2.name, p3.name)    # 分别表示不同的内存地址，相互之间不影响

Person.place = '火星'
print(p1.place,p2.place,p3.place)   # 表示同一个地址，如果类属性的值发生修改，则都会更改