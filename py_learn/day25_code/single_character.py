# 单字符匹配
"""
.                匹配除换行符以外的任意字符
[0123456789]     []是字符集合，表示匹配方括号中所包含的任意一个字符
[good]           匹配good中任意一个字符
[a-z]            匹配任意小写字母
[A-Z]            匹配任意大写字母
[0-9]            匹配任意数字，类似[0123456789]
[0-9a-zA-Z]      匹配任意的数字和字母
[0-9a-zA-Z_]     匹配任意的数字、字母和下划线
[^good]          匹配除了good这几个字母以外的所有字符，中括号里的^称为脱字符，表示不匹配集合中的字符
[^0-9]           匹配所有的非数字字符
\d               匹配数字，效果同[0-9]
\D               匹配非数字字符，效果同[^0-9]
\w               匹配数字，字母和下划线,效果同[0-9a-zA-Z_]
\W               匹配非数字，字母和下划线，效果同[^0-9a-zA-Z_]
\s               匹配任意的空白符(空格，回车，换行，制表，换页)，效果同[ \r\n\t\f]
\S               匹配任意的非空白符，效果同[^ \f\n\r\t]
"""

# 1. re模块中函数调用的方式
import re

'''
匹配： match()
查找/搜索： search()/findall()/finditer()
替换：sub() /subn()
分割：split()
'''
# 方式一：
pattern = re.compile(r'\d')
r1 = pattern.match('8')
print(r1)

# 方式二： 推荐
r2 = re.match(r'\d', '4')
print(r2)

# 2.    .           匹配除换行符以外的任意字符       ********
# 默认情况下，可以匹配除了换行符以外的任意字符
r1 = re.match(r'.', '\n')
print(r1)           # None

# 设置 flags=re.DOTALL， 则. 可以匹配任意字符， 常用于存在大量换行符的文本内容中
r2 = re.match(r'.', '\n', flags=re.DOTALL)   # dot ：点   all:所有       *********
print(r2)           # <re.Match object; span=(0, 1), match='\n'>


# 3.[xxxx] :不管方括号中书写了多少字符，都只匹配一位
'''
[0123456789]     []是字符集合，表示匹配方括号中所包含的任意一个字符
[good]           匹配good中任意一个字符
[a-z]            匹配任意小写字母
[A-Z]            匹配任意大写字母
[0-9]            匹配任意数字，类似[0123456789]
[0-9a-zA-Z]      匹配任意的数字和字母
[0-9a-zA-Z_]     匹配任意的数字、字母和下划线
'''
r1 = re.match(r'[a-z]', 'ld')
print(r1)
r1 = re.match(r'[a-z4-9A-W]', 'l')
print(r1)

# 4.[^xxxx]： 称为脱字符，表示不匹配集合中的字符，表示否定
'''
[^good]          匹配除了good这几个字母以外的所有字符，中括号里的^称为脱字符，表示不匹配集合中的字符
[^0-9]           匹配所有的非数字字符
'''
r1 = re.match(r'[^a-z]', 'l')
print(r1)   # None

# 5.
'''
\d               匹配数字，效果同[0-9]
\D               匹配非数字字符，效果同[^0-9]
\w               匹配数字，字母和下划线,效果同[0-9a-zA-Z_]
\W               匹配非数字，字母和下划线，效果同[^0-9a-zA-Z_]
\s               匹配任意的空白符(空格，回车，换行，制表，换页)，效果同[ \r\n\t\f]
\S               匹配任意的非空白符，效果同[^ \f\n\r\t]
'''
r1 = re.match(r'\d', '5')
print(r1)
r1 = re.match(r'\D', '5')
print(r1)

# 需求：匹配一个四位的验证码，每一位都由数字或者字母组成
# r1 = re.match(r'[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]','3234')
# print(r1)
